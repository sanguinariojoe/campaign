#define TAK

piece base, hatch, lifebuoy, turret, grabber, link,
	turret_1, sleeve_1, flare_1,
	turret_2, sleeve_2, flare_2,
	wake1, wake2, wake3,
	flag1, flag2, flag3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240


//********************Turret turn speeds
#define MG_TURRET_TURN			<60>
#define MG_TURRET_PITCH			<60>

#define LOAD_DIST			[125]

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_LOAD			4
#define SIG_AIM1			8
#define SIG_AIM2			16

#define RESTORE_PERIOD		2500

// effects
#define MG_MUZZLEFLASH 1024+2
#define SMALL_MUZZLEFLASH 1024+0
#define SMALL_MUZZLEDUST 1024+1

#define SMOKEPIECE	base

#include "constants.h"
#include "damageSmoke.h"

#define INFANTRY			412876 //458752 //983040 // this is 65536 * s3o model radius

static-var					MaxSpeed, bRampOpen, bMoving, bTooFar, boom_len, boom_heading, boom_pitch, FearOk, bAimAA1;

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

FlagFlap()
{
	while(TRUE)
	{
		turn flag1 to y-axis <30> speed <30>;
		turn flag2 to y-axis <-30> speed <30>;
		turn flag3 to y-axis <30> speed <30>;
		sleep 1000;
		turn flag1 to y-axis <-30> speed <30>;
		turn flag2 to y-axis <30> speed <30>;
		turn flag3 to y-axis <-30> speed <30>;
		sleep 1000;
	}
}

Create()
{
	bMoving = FALSE;
	FearOk=0;
	MaxSpeed = get MAX_SPEED;
	turn turret_2 to y-axis <180> now;
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script FlagFlap();
}


RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn turret_1 to y-axis <0> speed MG_TURRET_TURN;
	turn sleeve_1 to x-axis <0> speed MG_TURRET_PITCH;
	turn turret_2 to y-axis <180> speed MG_TURRET_TURN;
	turn sleeve_2 to x-axis <0> speed MG_TURRET_PITCH;
}

OpenRamp()
{
	var newSpeed;
	// we are opening the ramp, let's slow down (else we'll have the hold full of water)
	newSpeed = MaxSpeed/10;
	//set MAX_SPEED to newSpeed;
	bRampOpen = TRUE;
	return;
}

CloseRamp()
{
	bRampOpen = FALSE;
	// now the ramp is closed, we can go full speed again
	//set MAX_SPEED to MaxSpeed;
	return;
}

// Transport script courtesy of Gnome's script for Spring SW reb ground trans
TransportPickup(unitid, fromLua) {
	if ( fromLua != 1 ) {
		call-script OpenRamp();
	}
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
			set BUSY to 1;
			if( get UNIT_HEIGHT (unitid) == INFANTRY) 
			{ 
			//<= INFANTRY + FUDGE ) { // when using FUDGE
			  attach-unit unitid to 0 - 1; // hide infantry models
			}
			if( get UNIT_HEIGHT (unitid) != INFANTRY) 
			{ 
			//> INFANTRY + FUDGE ) {  // when using FUDGE
			  attach-unit unitid to base; // don't hide other units
			}
			set BUSY to 0;
	}
}

TransportDrop(unitid, position) {
	var depth, pos;
	depth = get GROUND_HEIGHT(position);
	if(depth < 3) {
		return 0;
	}
	pos = get XZ_HYPOT(get PIECE_XZ(base) - position) + [5];
	set BUSY to 1;
	call-script OpenRamp();
	turn turret to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
	attach-unit unitid to link;
	move grabber to z-axis pos speed [10000];
	wait-for-move grabber along z-axis;
	drop-unit unitid;
	move grabber to z-axis [0] now;
	wait-for-move grabber along z-axis;
	sleep 1;
	set BUSY to 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx SFXTYPE_WAKE1 from wake1;
		emit-sfx SFXTYPE_WAKE1 from wake2;
		emit-sfx SFXTYPE_WAKE1 from wake3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var newXZ, oldXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	start-script CloseRamp();
	bMoving = TRUE;
}

QueryWeapon1(piecenum)
{
	piecenum = flare_1;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret_1;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn turret_1 to y-axis heading speed MG_TURRET_TURN;
	turn sleeve_1 to x-axis (0-pitch) speed MG_TURRET_PITCH;
	wait-for-turn turret_1 around y-axis;
	wait-for-turn sleeve_1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

Shot1(foo)
{
	emit-sfx SMALL_MUZZLEFLASH from flare_1;
	emit-sfx SMALL_MUZZLEDUST from flare_1;
}

FireWeapon1()
{
	return;
}

QueryWeapon2(piecenum)
{
	piecenum = flare_2;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret_2;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	turn turret_2 to y-axis heading speed MG_TURRET_TURN;
	turn sleeve_2 to x-axis (0-pitch) speed MG_TURRET_PITCH;
	wait-for-turn turret_2 around y-axis;
	wait-for-turn sleeve_2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

Shot2(foo)
{
	emit-sfx MG_MUZZLEFLASH from flare_2;
}

FireWeapon2()
{
	return;
}


Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<50)
	{
		corpsetype = 1;
		return (TRUE);
	} else {
		explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lifebuoy type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	}
	corpsetype = 2;
	explode base type		SHATTER;
	return (TRUE);
}